/*
  Jiazheng Sun
  Updated: Mar 12, 2024

  Implementations of methods in class:
  FermiFockstate, FermiState, FermiBasis.
*/

#ifndef ORI_SDP_GS_SPINOPERATORS_CPP
#define ORI_SDP_GS_SPINOPERATORS_CPP

#include "spinOperators1D.hpp"

//------------------------------------------------------------------SpinZHalfOp----------

std::string SpinZHalfOp::toString() const {
  std::string ans = "SZ_{";
  ans += std::to_string(this->index);
  ans += "}";
  return ans;
}

SpinHalfState SpinZHalfOp::operator*(SpinHalfBaseState const & rhs) const {
  if (rhs[index]) {
    return SpinHalfState(complex<double>(0.5, 0), rhs);
  }
  else {
    return SpinHalfState(complex<double>(-0.5, 0), rhs);
  }
}

SpinHalfState SpinZHalfOp::operator*(SpinHalfState const & rhs) const {
  SpinHalfState ans;
  for (vector<pair<complex<double>, SpinHalfBaseState> >::const_iterator it =
           rhs.getBegin();
       it != rhs.getEnd();
       ++it) {
    ans += (((*this) * (it->second)) *= it->first);
  }
  return ans;
}

//------------------------------------------------------------------SpinUDHalfOp---------

std::string SpinUDHalfOp::toString() const {
  std::string ans = "S";
  if (this->plusF) {
    ans += "+";
  }
  else {
    ans += "-";
  }
  ans += std::to_string(this->index);
  ans += "}";
  return ans;
}

SpinHalfState SpinUDHalfOp::operator*(SpinHalfBaseState const & rhs) const {
  if (plusF) {
    if (rhs[index]) {
      return SpinHalfState(complex<double>(0, 0), rhs);
    }
    vector<bool> Nums = rhs.getNums();
    Nums[index] = true;
    return SpinHalfState(complex<double>(1.0, 0), SpinHalfBaseState(Nums));
  }
  else {
    if (!rhs[index]) {
      return SpinHalfState(complex<double>(0, 0), rhs);
    }
    vector<bool> Nums = rhs.getNums();
    Nums[index] = false;
    return SpinHalfState(complex<double>(1.0, 0), SpinHalfBaseState(Nums));
  }
}

SpinHalfState SpinUDHalfOp::operator*(SpinHalfState const & rhs) const {
  SpinHalfState ans;
  for (vector<pair<complex<double>, SpinHalfBaseState> >::const_iterator it =
           rhs.getBegin();
       it != rhs.getEnd();
       ++it) {
    ans += (((*this) * (it->second)) *= it->first);
  }
  return ans;
}

//-------------------------------------------------------------------SpinMonomial--------

#endif
